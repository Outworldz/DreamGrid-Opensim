integer Private = 1;    // Change to 1 to prevent others riding.
float rez_height = 0.971; // Change this # to the Z Height value of your car sitting flat on the ground.
vector Sitpos = <1.3,0.35,-0.10>;
vector SitrotV = <0,0,0>;
rotation Sitrot;
integer tt;
integer fwdcount = 1;
key oldagent;
key agent;
float forward_power = 5; //Power used to go forward (1 to 30)
float forward_normal = 5;
float crash_power_forward = 4;
float reverse_power = -3; //Power ued to go reverse (-1 to -30)
float turning_ratio = 2.0; //How sharply the vehicle turns. Less is more sharply. (.1 to 10)
float turning_ratio_forward = 2.0;
float turning_ratio_reverse = -1.5;
float turning_ratio_collide = 1.75;
integer turncount;
string Wheeldir = "WC";
string NewWheeldir = "WC";
string Wheelrot = "S";
string NewWheelrot = "S";
float Speed;
integer Gear = 1;
integer Run;
integer oldn;
string sit_message = "Ride"; //Sit message
string not_owner_message = "You are not the owner of this vehicle, but you can copy it and have your own to test in this sim."; //Not owner message
vector COLOR = <1.0,1.0,1.0>;
float ALPHA_ON = 0.10;
float ALPHA_OFF = 0.0;
//This forces an initial update.
integer visible = FALSE;
string TITLE="Drive!";   
string      DrivingAnim = "driving generic"; //Animation to play when owner sits
integer idlecount = 0;

go_up()
{
    llSetStatus(STATUS_PHYSICS, FALSE);
    llSetRot(<0,0,0,0>);
    llSetStatus(STATUS_PHYSICS, TRUE);
}

setCamera(float degrees) {
rotation sitRot = llAxisAngle2Rot(<0, 0, 1>, degrees * PI);
llSetCameraEyeOffset(<-10.0, 0, 5> * sitRot);
llSetCameraAtOffset(<55, 0, -10> * sitRot);
llForceMouselook(FALSE);
}

setVehicle()
{
        llSetVehicleType( VEHICLE_TYPE_CAR );
        llSetVehicleFloatParam( VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY, 0.25 ); 
        llSetVehicleFloatParam( VEHICLE_ANGULAR_DEFLECTION_TIMESCALE, 0.15 ); 
        llSetVehicleFloatParam( VEHICLE_LINEAR_DEFLECTION_EFFICIENCY, 0.8 ); 
        llSetVehicleFloatParam( VEHICLE_LINEAR_DEFLECTION_TIMESCALE, 0.1 ); 
        llSetVehicleFloatParam( VEHICLE_LINEAR_MOTOR_TIMESCALE, 1.0 ); 
        llSetVehicleFloatParam( VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE, 0.2 ); 
        llSetVehicleFloatParam( VEHICLE_ANGULAR_MOTOR_TIMESCALE, 0.1 ); 
        llSetVehicleFloatParam( VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE, 0.5 );
        llSetVehicleFloatParam( VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY, 1.0 );
        llSetVehicleFloatParam( VEHICLE_VERTICAL_ATTRACTION_TIMESCALE, 5.0 );
       // llSetVehicleFloatParam( VEHICLE_BUOYANCY, 0.10 );
       // llSetVehicleFloatParam( VEHICLE_BANKING_EFFICIENCY, 0 );
       // llSetVehicleFloatParam( VEHICLE_BANKING_MIX, 0 );
       // llSetVehicleFloatParam( VEHICLE_BANKING_TIMESCALE, 0 );
        llSetVehicleVectorParam( VEHICLE_LINEAR_FRICTION_TIMESCALE, <1000.0, 10.0, 1000.0> ); 
        llSetVehicleVectorParam( VEHICLE_ANGULAR_FRICTION_TIMESCALE, <1000.0, 10.0, 1000.0> );        
}

Init()
{
    Run = 0;
    llSetVehicleType(VEHICLE_TYPE_CAR);
    llSetStatus(STATUS_PHYSICS, FALSE);
    show();
    
    vector rotv = llRot2Euler(llGetRot());
    rotation rot = llEuler2Rot(<0,0,rotv.z>);
    llSetRot(rot);
    
    Sitrot = llEuler2Rot(DEG_TO_RAD * SitrotV);
    
    llMessageLinked(LINK_ALL_OTHERS, 0, "S", NULL_KEY);     // wheels stop
    llMessageLinked(LINK_ALL_OTHERS, 0, "WC", NULL_KEY);     // wheels straight
    // Reset();
}

Reset()
{
    Run = 0;
    vector rotv = llRot2Euler(llGetRot());
    rotation rot = llEuler2Rot(<0,0,rotv.z>);
    llSetRot(rot);
    
    vector start = llGetPos();
    vector ground = start;
    ground.z = llGround( ZERO_VECTOR );
    vector end = <start.x, start.y, ground.z>;
    list results = llCastRay(start, end, [RC_DATA_FLAGS, RC_GET_NORMAL, RC_MAX_HITS, 1] );
    key uuid = llList2Key(results, 0);
    vector vect = llList2Vector(results, 1);
    vector pos = llGetPos();
    if (uuid != NULL_KEY)
    vect.z = vect.z + rez_height;
    llSetPos(<pos.x,pos.y,vect.z>);
    if (uuid == NULL_KEY)
    vect.z = (llGround(ZERO_VECTOR)+rez_height);
    llSetPos(<pos.x,pos.y,vect.z>);
    
    llSetSitText("Drive It!");
    
}

integer LastSetMaterial = FALSE;

SetMaterial()
{
    // This causes a full update to be sent to ALL clients for each primitive that 
    // listens to this linked message. This should be called only ONCE!
    if(LastSetMaterial == FALSE)
    {
        LastSetMaterial = TRUE;
        llSetPrimitiveParams([PRIM_MATERIAL, PRIM_MATERIAL_GLASS]);
        llMessageLinked(LINK_ALL_OTHERS, 0, "SetMat", NULL_KEY);    // Tell daughter pims on ground to be glass
    }
}

show()
{
    //Schedules more sometimes unnecessary full updates, only fire when needed
    if(visible == FALSE)
    {
        visible = TRUE;
        //Only set if there is a title.
        if(TITLE != "")
        {
            llSetText(TITLE, COLOR,ALPHA_ON);   
        }     
        llSetAlpha(ALPHA_ON, ALL_SIDES);
    }
}
 
hide()
{
    //Same as in show().
    if(visible == TRUE)
    {
        visible = FALSE;
        if(TITLE != "")
        {
            llSetText("", COLOR,ALPHA_ON);
        }
        llSetAlpha(ALPHA_OFF, ALL_SIDES);
    }
}    

default
{
    
on_rez(integer rn)
{
   //Reset();
    llSetSitText(sit_message);
    llSitTarget(Sitpos, Sitrot);
    setCamera(0);
    Init();
}    

state_entry()
{
    llSetSitText(sit_message);
    llSitTarget(Sitpos, Sitrot);
    setCamera(0);
    Init();
    
}

collision_start(integer collide)
{
    forward_power = crash_power_forward; 
    turning_ratio = turning_ratio_collide;
//      if (agent == llGetOwner()) { llMessageLinked(LINK_SET, 0, "collide", NULL_KEY);}

}

collision_end(integer collide)
{
    forward_power = forward_normal; //Power used to go forward (1 to 30)
    turning_ratio = turning_ratio_forward; //How sharply the vehicle turns. Less is more sharply. (.1 to 10)
}    

    //land_collision(integer collide4)
    //{
    //forward_power = 10; //Power used to go forward (1 to 30)
    //reverse_power = -3; //Power ued to go reverse (-1 to -30)
    //turning_ratio = 0.28; //How sharply the vehicle turns. Less is more sharply. (.1 to 10)
    //llSetText("land_collision",<1,1,1>,1);
    //}

    //land_collision_start(integer collide5)
    //{
    //forward_power = 10; //Power used to go forward (1 to 30)
    //reverse_power = -3; //Power ued to go reverse (-1 to -30)
    //turning_ratio = 0.28; //How sharply the vehicle turns. Less is more sharply. (.1 to 10)
    //llSetText("land_collision_start",<1,1,1>,1);
    //}

    //land_collision_end(integer collide6)
    //{
    //forward_power = 1; //Power used to go forward (1 to 30)
    //reverse_power = -1; //Power ued to go reverse (-1 to -30)
    //turning_ratio = 10; //How sharply the vehicle turns. Less is more sharply. (.1 to 10)
    //llSetText("land_collision_end",<1,1,1>,1);
    //}

    link_message(integer sender, integer num, string message, key id)
    {
    if(message=="reset")
        {
        Reset();
        llMessageLinked(LINK_SET, 0, "pipeflame", NULL_KEY);
        llMessageLinked(LINK_SET, 0, "collide", NULL_KEY);
        }
    }

        
            
    changed(integer change)
    {
        if ((change & CHANGED_LINK) == CHANGED_LINK)
        {
            agent = llAvatarOnSitTarget();
            if (agent != NULL_KEY)
            {                
                if( (agent != llGetOwner()))
                {
                    llSay(0, not_owner_message);
                    llMessageLinked(LINK_SET, 0, "sound", "alarm");
                    llSleep(4.0);
                    llMessageLinked(LINK_SET, 0, "sound", "goodbye");
                    llSleep(1.0);                                    
                    llUnSit(agent);
                    llMessageLinked(LINK_SET, 0, "shift", "8");
                    llPushObject(agent, <0,0,50>, ZERO_VECTOR, FALSE);
                    return;
                }
                else
                {
                    llSetStatus(STATUS_PHYSICS, TRUE);
                    llSleep(.4);
                    oldagent = agent;
                    setVehicle();
                    SetMaterial();
                    llSetTimerEvent(0.3);
                    llMessageLinked(LINK_SET, 0, "shift", "2");
                    llMessageLinked(LINK_SET, 0, "pipeflame", NULL_KEY);
                    llMessageLinked(LINK_SET, 0, "headlight", "0");
                    llLoopSound("start", 1);
                    llRequestPermissions(agent, PERMISSION_TRIGGER_ANIMATION | PERMISSION_TAKE_CONTROLS);
                    hide();
                    Run = 1;
                    llLoopSound("idle", 1);
                }
            }
            else
            {
                Run = 0;
                llReleaseControls();
                llStopAnimation(DrivingAnim);
                llMessageLinked(LINK_SET, 0, "shift", "8");                
                llMessageLinked(LINK_ALL_OTHERS, 0, "S", NULL_KEY);
                llMessageLinked(LINK_SET, 0, "sound", "stopall");
                llStopSound();
                Init();
                Reset();
            }
        }
    }
    
    run_time_permissions(integer perm)
    {
        if (perm)
        {
          forward_power = forward_normal;
          reverse_power = reverse_power;
          turning_ratio = turning_ratio_forward; 
            Gear = 2;
            llTakeControls(CONTROL_FWD | CONTROL_BACK | CONTROL_DOWN | CONTROL_UP | CONTROL_RIGHT | CONTROL_LEFT | CONTROL_ROT_RIGHT | CONTROL_ROT_LEFT, TRUE, TRUE);
            llMessageLinked(LINK_SET, 0, "shift", "2");
            llMessageLinked(LINK_SET, 0, "pipeflame", NULL_KEY);
            llMessageLinked(LINK_SET, 0, "headlight", "0");
            llStartAnimation(DrivingAnim);
            llWhisper(0,"Hit M for mouselook, page up and down for shifting, if you flip standing will flip car back on its wheels. type /2 listcolors to see available colors and /2 color <name> to change colors.");
        }
    }
    
    control(key id, integer level, integer edge)
    {
        if(Run == 0)
        {
            return;
        }
        integer reverse=1;
        vector angular_motor;
        
        //get current speed
        vector vel = llGetVel();
        Speed = llVecMag(vel);
        
        //car controls
        if ((level & edge & CONTROL_UP) || ((Gear >= 7) && (level & CONTROL_UP)))
        {
            Gear=Gear+1;
            if(Gear == 1){ 
                          llMessageLinked(LINK_SET, 0, "screech", NULL_KEY);
                          llSay(0,"Burn Out - U");
                         }
            if(Gear == 2) {
                          llMessageLinked(LINK_SET, 0, "gear1", NULL_KEY);                               
                          llSay(0,"1st Gear - U");
                          }
            if(Gear == 3) {
                          llMessageLinked(LINK_SET, 0, "gear2", NULL_KEY);                                
                          llSay(0,"2nd Gear - U");
                          }                          
            if(Gear == 4) {
                          llMessageLinked(LINK_SET, 0, "gear3", NULL_KEY);                                
                          llSay(0,"3rd Gear - U");
                          }                                
            if(Gear == 5) {
                          llMessageLinked(LINK_SET, 0, "gear4", NULL_KEY);                              
                          llSay(0,"4th Gear - U");
                          }                                
            if(Gear == 6) {
                          llMessageLinked(LINK_SET, 0, "gear5", NULL_KEY);                                
                          llSay(0,"5th Gear- U ");
                          }      
            if(Gear == 7) {
                          llMessageLinked(LINK_SET, 0, "gear6", NULL_KEY);                                
                          llSay(0,"TURBO...!!! - U");
                          }                                
            if (Gear < 1) Gear = 1;
            if (Gear > 7) Gear = 7;
        }
        
        if ((level & edge & CONTROL_DOWN) || ((Gear >= 7) && (level & CONTROL_DOWN)))
        {
            Gear=Gear-1;
            if(Gear == 1){
                          llMessageLinked(LINK_SET, 0, "screech", NULL_KEY);            
                          llSay(0,"Burn Out - D");
                         }
            if(Gear == 2) {
                          llMessageLinked(LINK_SET, 0, "gear1", NULL_KEY);                                
                          llSay(0,"1st Gear - D");
                          }
            if(Gear == 3) {
                          llMessageLinked(LINK_SET, 0, "gear2", NULL_KEY);                                
                          llSay(0,"2nd Gear - D");
                          }                          
            if(Gear == 4) {
                          llMessageLinked(LINK_SET, 0, "gear3", NULL_KEY);                                
                          llSay(0,"3rd Gear - D");
                          }                                
            if(Gear == 5) {
                          llMessageLinked(LINK_SET, 0, "gear4", NULL_KEY);                                
                          llSay(0,"4th Gear - D");
                          }                                
            if(Gear == 6) {
                          llMessageLinked(LINK_SET, 0, "gear5", NULL_KEY);                                
                          llSay(0,"5th Gear - D");
                          }      
            if(Gear == 7) {
                          llMessageLinked(LINK_SET, 0, "gear6", NULL_KEY);                                
                          llSay(0,"TURBO...!!! - D");
                          }                                
            if (Gear < 1) Gear = 1;
            if (Gear > 7) Gear = 7;
        }
        
        if(level & CONTROL_FWD)

        {
            turning_ratio = turning_ratio_forward;

            if(Gear == 1) {
            llMessageLinked(LINK_SET, 0, "screech", NULL_KEY);
            llMessageLinked(LINK_SET, 0, "letsburn", NULL_KEY);            
            llMessageLinked(LINK_SET, 0, "pipeflame", NULL_KEY);
            llSetVehicleVectorParam(VEHICLE_LINEAR_MOTOR_DIRECTION, <(Gear*forward_power),0,0>);
                          }
            if(Gear == 2) {
            llMessageLinked(LINK_SET, 0, "gear1", NULL_KEY);
            llSetVehicleVectorParam(VEHICLE_LINEAR_MOTOR_DIRECTION, <Gear*forward_power,0,0>);
                          }
            if(Gear == 3) {
            llMessageLinked(LINK_SET, 0, "gear2", NULL_KEY);                   
            llSetVehicleVectorParam(VEHICLE_LINEAR_MOTOR_DIRECTION, <Gear*forward_power,0,0>);          
                          }
            if(Gear == 4) {
            llMessageLinked(LINK_SET, 0, "gear3", NULL_KEY);                
            llSetVehicleVectorParam(VEHICLE_LINEAR_MOTOR_DIRECTION, <Gear*forward_power,0,0>);
                          }                                              
            if(Gear == 5) {
            llMessageLinked(LINK_SET, 0, "gear4", NULL_KEY);                   
            llSetVehicleVectorParam(VEHICLE_LINEAR_MOTOR_DIRECTION, <Gear*forward_power,0,0>);
                          }
            if(Gear == 6) { 
            llMessageLinked(LINK_SET, 0, "gear5", NULL_KEY);               
            llSetVehicleVectorParam(VEHICLE_LINEAR_MOTOR_DIRECTION, <Gear*forward_power,0,0>);
                          }
            if(Gear == 7) {
            llMessageLinked(LINK_SET, 0, "gear6", NULL_KEY);                   
            llSetVehicleVectorParam(VEHICLE_LINEAR_MOTOR_DIRECTION, <Gear*(forward_power),0,0>);
            llMessageLinked(LINK_SET, 0, "pipeflame", NULL_KEY);
                          }
            reverse=1;
            NewWheelrot = "F";
        }

        if(level & CONTROL_BACK)
        {
            llSetVehicleVectorParam(VEHICLE_LINEAR_MOTOR_DIRECTION, <Gear*reverse_power,0,0>);
            turning_ratio = turning_ratio_reverse;
            reverse = -1;
            NewWheelrot = "R";
        }

        if(level & (CONTROL_RIGHT|CONTROL_ROT_RIGHT))
        {
            angular_motor.z -= Speed / (turning_ratio*Gear);
            NewWheeldir = "WR";
            turncount = 10;
        }
                        
        if(level & (CONTROL_LEFT|CONTROL_ROT_LEFT))
        {
            angular_motor.z += Speed / (turning_ratio*Gear);
            NewWheeldir = "WL";
            turncount = 10;
        }
        
//        if(edge & CONTROL_FWD)
//        {
        //    idlecount = 0;
//            llSay(0,"FWD RELEASE");
//            llMessageLinked(LINK_SET, 0, "sound", "stopall");
//            llSleep(0.1);
//            llMessageLinked(LINK_SET, 0, "sound", "idle");        
//        }
        
        if(edge & (CONTROL_LEFT|CONTROL_ROT_LEFT|CONTROL_RIGHT|CONTROL_ROT_RIGHT))
        {
            NewWheeldir = "WC";
        }        

       llSetVehicleVectorParam(VEHICLE_ANGULAR_MOTOR_DIRECTION, angular_motor);
        if(turncount > 0)
        {
            turncount--;
        }
        if(turncount == 1)
        {
            NewWheeldir = "WC";
        }
        if(Wheeldir != NewWheeldir){
            Wheeldir = NewWheeldir;
            llMessageLinked(LINK_ALL_OTHERS, 0, Wheeldir, NULL_KEY);
       }
        if(Wheelrot != NewWheelrot){
            Wheelrot = NewWheelrot;
            llMessageLinked(LINK_ALL_OTHERS, 0, Wheelrot, NULL_KEY);
        }
    } //end control       

    timer(){
        if(Run == 1){

//            vector vel = llGetVel();
//            Speed = llVecMag(vel);
//            llSetText((string)Speed,<1,1,1>,1);
            
//            if(Speed < 0.9)
//            {
//              idlecount = idlecount + 1;
//              if(idlecount == 1){
//                llMessageLinked(LINK_SET, 0, "sound", "idle");
//                fwdcount = 1;
//                }
//            }
                llSetTimerEvent(0.1);          // If restarted timer() appears to keep working  
            }
            else
            {
                llSetTimerEvent(0.0);
        }
    }
    
} //end default